#+STARTUP: overview

* Notes
Show my custom keybindings with describe-personal-keybindings (works for those defined with use-package and bind-key, NOT those with key-chord).

* Interface Tweaks

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Sensible defaults
For this I picked some of the code from https://github.com/hrs/sensible-defaults.el

#+BEGIN_SRC emacs-lisp
(defun sensible-defaults/comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
  (interactive)
  (let (beg end)
    (if (region-active-p)
        (setq beg (region-beginning) end (region-end))
      (setq beg (line-beginning-position) end (line-end-position)))
(comment-or-uncomment-region beg end)))

(bind-key "C-/" 'sensible-defaults/comment-or-uncomment-region-or-line)


;;  "Treat CamelCaseSubWords as separate words in every programming mode."
(add-hook 'prog-mode-hook 'subword-mode)


;;   "Add file sizes in human-readable units (KB, MB, etc) to dired buffers."
(setq-default dired-listing-switches "-alh")


;;  "When something changes a file, automatically refresh the buffer containing that file so they can't get out of sync."
(global-auto-revert-mode t)


;;  "Visually indicate matching pairs of parentheses."
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

* Which Key
Brings up some help.

#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(which-key-mode))
#+END_SRC

* Themes and Font
Note: For some reaseon I get an error with use-package and spacemacs-theme. So I installed the package manually.
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark t)

(set-face-attribute 'default nil :height 90) ;; set default font size to 9 pt
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  ;; Disable emacs internal version control
  (setq vc-handled-backends nil))

;; Opens the status popup (like git status)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
;; Org-mode keybindings
;; These are necessary according to http://orgmode.org/worg/org-faq.html
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-co" 'org-iswitchb) ;; NOTE: did not use default because of clash

;; Don't like using the arrow keys
(global-set-key (kbd "C-M-l") 'org-metaright)
(global-set-key (kbd "C-M-h") 'org-metaleft)
#+END_SRC

* Navigation, Projects, etc.
** Ace Window
 #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :init
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
     (setq aw-background nil)
     :bind
     (("C-x o" . ace-window)))
 #+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (unbind-key "C-c C-p" projectile-mode-map)) ;; Somehow, C-c C-p is the default, even though the documentation says otherwise.
#+END_SRC

* Keys TODO: Use bind-key.el
** CUA Mode
#+BEGIN_SRC emacs-lisp
(cua-mode t)
(setq cua-paste-pop-rotate-temporarily t)
#+END_SRC

** key-chord
 https://github.com/emacsorphanage/key-chord
 Map pairs of simultaneously pressed keys to commands.

 #+BEGIN_SRC emacs-lisp
   (use-package key-chord
     :init
     (key-chord-mode 1))

   ;; (key-chord-define-global "fg"     'find-file)
   ;; (key-chord-define-global "fg"     'ido-switch-buffer)
   (key-chord-define-global "df"     'mode-line-other-buffer)
   (key-chord-define-global "jk" 'ace-window)
 #+END_SRC

** Custom bindings
Note that bindings for imported packages are found in the corresponding section and not here

#+BEGIN_SRC emacs-lisp
;; Avy (jump to words or lines)
;; Check out https://github.com/abo-abo/avy for more cool stuff!
(global-set-key (kbd "C-:") 'avy-goto-word-1)
(global-set-key (kbd "C-;") 'avy-goto-line)

;; Toggle visual line mode (wrap lines nicely)
(global-set-key (kbd "<f12>") 'visual-line-mode)

;; Refresh with F5
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Show buffer-menu instead of list-buffers
(global-set-key (kbd "C-x C-b") 'buffer-menu)

;; Kill-this-buffer (no prompting for name)
(global-set-key (kbd "C-w") 'kill-this-buffer)

;; No need for C-j anymore
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Kill whole line
(global-set-key (kbd "C-S-k") 'kill-whole-line)

;; Scrolling
(global-set-key "\M-n"  (lambda () (interactive) (scroll-up   4)) )
(global-set-key "\M-p"  (lambda () (interactive) (scroll-down 4)) )

;; Duplicate line or region
(load-library "duplicate-line-or-region")
(global-set-key (kbd "C-S-n") 'duplicate-line-or-region)
(global-set-key (kbd "C-S-p") 'duplicate-line-or-region)

;; MOVE line or region up/down
(load-library "move-lines")
(global-set-key (kbd "C-M-n") 'move-lines-down)
(global-set-key (kbd "C-M-p") 'move-lines-up)

;; MOVE to different window
(define-key org-mode-map (kbd "M-h") nil) ;; unbind from orgmode first
(global-set-key (kbd "M-h") 'windmove-left)
(global-set-key (kbd "M-l") 'windmove-right)
(global-set-key (kbd "M-j") 'windmove-down)
(global-set-key (kbd "M-k") 'windmove-up)

;; SWAP buffers/frames (got this from https://github.com/lukhas/buffer-move)
;; (load-library "buffer-move")
;; (global-set-key (kbd "<C-left>") 'buf-move-left)
;; (global-set-key (kbd "<C-right>") 'buf-move-right)
;; (global-set-key (kbd "<C-down>") 'buf-move-down)
;; (global-set-key (kbd "<C-up>") 'buf-move-up)

;; eyebrowse
;(global-set-key (kbd "C-9") 'eyebrowse-prev-window-config)
;(global-set-key (kbd "C-0") 'eyebrowse-next-window-config)
#+END_SRC
